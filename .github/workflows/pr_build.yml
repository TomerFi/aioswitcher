---
name: Pull request build

on:
  pull_request:
    branch: dev

jobs:
  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.9]
    name: Verify project with Python ${{ matrix.python }}
    steps:
      - name: Source checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: ${{ runner.os }}-${{ matrix.python }}-pip-

      - name: Set up poetry
        run: |
          pip install --upgrade pip poetry
          poetry config virtualenvs.create false --local

      - name: Cache poetry repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: ${{ runner.os }}-${{ matrix.python }}-poetry-

      - name: Install dependencies
        run: poetry install -vv -E "checkers"

      - name: Lint yaml files
        run: poetry run yamllint --config-file .yamllint --format colored --strict .

      - name: Lint rst files
        run: poetry run doc8 --allow-long-titles --max-line-length 100 docs

      - name: Security check code with bandit
        run: poetry run bandit -rvc .bandit src/ tests/ docs/ -l -ii

      - name: Validate imports with isort
        run: poetry run isort --check-only src/ tests/ docs/

      - name: Lint code with flake8
        run: poetry run flake8 --statistics --count --doctests src/ tests/ docs/

      - name: Check code style with black
        run: poetry run black --check src/ tests/ docs/

      - name: Check static typing with mypy
        run: poetry run mypy --follow-imports silent --ignore-missing-imports src/ tests/ docs/

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.6, 3.7, 3.8, 3.9]
    name: Test project with Python ${{ matrix.python }}
    steps:
      - name: Source checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: ${{ runner.os }}-${{ matrix.python }}-pip-

      - name: Set up poetry
        run: |
          pip install --upgrade pip poetry
          poetry config virtualenvs.create false --local

      - name: Cache poetry repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}
          restore-keys: ${{ runner.os }}-${{ matrix.python }}-poetry-

      - name: Install dependencies
        run: poetry install -vv -E "tests"

      - name: Perform unit tests
        if: matrix.python != 3.8
        run: poetry run pytest -vs

      - name: Perform unit tests with coverage report
        if: matrix.python == 3.8
        run: poetry run pytest -vs --cov --cov-config=.coveragerc --cov-report=xml:coverage.xml

      - name: Upload coverage report as artifact
        if: matrix.python == 3.8
        uses: actions/upload-artifact@v2.2.3
        with:
          name: coverage-report
          path: ./coverage.xml

  coverage:
    runs-on: ubuntu-latest
    name: Push coverage report to CodeCov
    needs: [verify, test]
    steps:
      - name: Source checkout
        uses: actions/checkout@v2

      - name: Download coverage report from artifacts
        uses: actions/download-artifact@v2
        with:
          name: coverage-report

      - name: Push to CodeCov
        uses: codecov/codecov-action@v1.5.0
        with:
          file: coverage.xml
          fail_ci_if_error: true
