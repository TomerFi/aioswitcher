---
name: Pull request build

on:
  pull_request:
    branches:
      - dev

env:
  MAIN_PY_VER: "3.10"

jobs:
  triage:
    runs-on: ubuntu-latest
    name: Pull request triage
    permissions:
      pull-requests: write
    steps:
      - name: Auto approve
        if: github.actor == 'dependabot[bot]' || github.actor == 'allcontributors[bot]'
        uses: hmarr/auto-approve-action@v2.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  label:
    runs-on: ubuntu-latest
    name: Label pull request
    permissions:
      pull-requests: write
    steps:
      - name: Source checkout
        uses: actions/checkout@v2.4.0

      - name: Label if conflicts found
        uses: mschilde/auto-label-merge-conflicts@v2.0
        with:
          CONFLICT_LABEL_NAME: "status: has conflicts"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Label if contains large files
        uses: actionsdesk/lfs-warning@v3.1
        with:
          labelName: "warn: lfs detected"
          filesizelimit: "1mb"

  lint:
    runs-on: ubuntu-latest
    name: Lint source files
    permissions:
      pull-requests: read
    steps:
      - name: Source checkout
        uses: actions/checkout@v2.4.0

      - name: Set up Python ${{ env.MAIN_PY_VER }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.MAIN_PY_VER }}

      - name: Cache pip repository
        uses: actions/cache@v2.1.7
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ env.MAIN_PY_VER }}

      - name: Prepare python environment
        run: |
          pip install -rrequirements.txt
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache poetry virtual environment
        uses: actions/cache@v2.1.7
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ env.MAIN_PY_VER }}

      - name: Install dev dependencies and lint project
        run: |
          poe install_dev
          poe lint

      - name: Install deno runtime
        uses: denoland/setup-deno@v1.1.0

      - name: Check license headers on source files
        run: poe lic_check

  lint-docs:
    runs-on: ubuntu-latest
    name: Lint documentation files
    permissions:
      pull-requests: write
    steps:
      - name: Source checkout
        uses: actions/checkout@v2.4.0

      - name: Lint markdown files
        uses: prologic/action-markdownlint@v0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          level: error

      - name: Check for spelling mistakes
        uses: reviewdog/action-misspell@v1.11
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: "US"
          reporter: github-pr-check
          level: error

  test:
    runs-on: ubuntu-latest
    needs: [lint, lint-docs]
    strategy:
      matrix:
        python: ["3.9", "3.10"]
    name: Test project with Python ${{ matrix.python }}
    permissions:
      pull-requests: read
    steps:
      - name: Source checkout
        uses: actions/checkout@v2.4.0

      - name: Setup timezone
        uses: zcong1993/setup-timezone@v1.1.2
        with:
          timezone: Asia/Jerusalem

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip repository
        uses: actions/cache@v2.1.7
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python }}

      - name: Prepare python environment
        run: |
          pip install -rrequirements.txt
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache poetry virtual environment
        uses: actions/cache@v2.1.7
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python }}

      - name: Install project package
        run: poe install_all

      - name: Test project
        run: >
          if [ ${{ matrix.python }} == ${{ env.MAIN_PY_VER }} ]; then poe test_rep;
          else poe test; fi

      - name: Push coverage report as artifact
        if: ${{ matrix.python == env.MAIN_PY_VER }}
        uses: actions/upload-artifact@v2.3.1
        with:
          name: reports
          if-no-files-found: error
          path: |
            ./coverage.xml
            ./junit.xml

  report:
    runs-on: ubuntu-latest
    needs: [test]
    name: Publish tests and coverage reports
    permissions:
      checks: write
      issues: write
      pull-requests: write
    steps:
      - name: Download coverage report from artifacts
        uses: actions/download-artifact@v2
        with:
          name: reports
          path: reports

      - name: Report test summary
        uses: EnricoMi/publish-unit-test-result-action@v1.30
        if: always()
        with:
          test_changes_limit: 0
          files: reports/junit.xml

      - name: Push to CodeCov
        uses: codecov/codecov-action@v2.1.0
        with:
          files: reports/coverage.xml
          fail_ci_if_error: true
