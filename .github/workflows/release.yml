---
name: Release

on:
  workflow_dispatch:
    inputs:
      tweet:
        description: "Tweet new release?"
        required: false
        default: "no"

jobs:
  secrets_keys:
    runs-on: ubuntu-latest
    name: Determine secrets keys
    outputs:
      pypi_token: ${{ steps.output_keys.outputs.pypi_token }}
      twitter_api_key: ${{ steps.output_keys.outputs.twitter_api_key }}
      twitter_api_secret_key: ${{ steps.output_keys.outputs.twitter_api_secret_key }}
      twitter_access_token: ${{ steps.output_keys.outputs.twitter_access_token }}
      twitter_access_token_secret: ${{ steps.output_keys.outputs.twitter_access_token_secret }}
      release_pat: ${{ steps.output_keys.outputs.release_pat }}
    steps:
      - name: Save keys as output
        id: output_keys
        run: |
          actor=$( echo ${{ github.actor }} | tr [:lower:] [:upper:])
          echo "::set-output name=pypi_token::$actor"_PYPI_TOKEN
          echo "::set-output name=twitter_api_key::$actor"_TWITTER_API_KEY
          echo "::set-output name=twitter_api_secret_key::$actor"_TWITTER_API_SECRET_KEY
          echo "::set-output name=twitter_access_token::$actor"_TWITTER_ACCESS_TOKEN
          echo "::set-output name=twitter_access_token_secret::$actor"_TWITTER_ACCESS_TOKEN_SECRET
          echo "::set-output name=release_pat::$actor"_RELEASE_PAT

  release:
    runs-on: ubuntu-latest
    needs: [secrets_keys]
    environment: deployment
    name: Build, publish, release, and announce
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip repository
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Prepare python environment
        run: |
          pip install -r requirements.txt
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache poetry virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Configure git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Determine version and create changelog
        id: bumper
        uses: tomerfi/version-bumper-action@1.2.0

      - name: Set new project version
        uses: ciiiii/toml-editor@1.0.0
        with:
          file: pyproject.toml
          key: tool.poetry.version
          value: ${{ steps.bumper.outputs.new_version }}

      - name: Commit, tag, and push
        # yamllint disable rule:line-length
        # editorconfig-checker-disable
        run: |
          git add pyproject.toml
          git commit -m "build: bump version to ${{ steps.bumper.outputs.new_version }} [skip ci]"
          git push
          git tag ${{ steps.bumper.outputs.new_version }} -m "${{ steps.bumper.outputs.new_version }}"
          git push origin ${{ steps.bumper.outputs.new_version }}
        # yamllint enable rule:line-length
        # editorconfig-checker-enable

      - name: Verify documentation site build
        run: |
          poe install_docs
          poe docs_linkcheck
          poe docs_build

      - name: Publish build to PyPi
        run: >
          poetry publish --build -u __token__
          -p ${{ secrets[needs.secrets_keys.outputs.pypi_token] }}

      - name: Set development project version
        uses: ciiiii/toml-editor@1.0.0
        with:
          file: pyproject.toml
          key: tool.poetry.version
          value: ${{ steps.bumper.outputs.next_dev_iteration }}

      - name: Commit and push
        # yamllint disable rule:line-length
        run: |
          git add pyproject.toml
          git commit -m "build: bump version to ${{ steps.bumper.outputs.next_dev_iteration }} [skip ci]"
          git push
        # yamllint enable rule:line-length

      - name: Create a release
        id: gh_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets[needs.secrets_keys.outputs.release_pat] }}
          script: |
            const repo_name = context.payload.repository.full_name
            const response = await github.request('POST /repos/' + repo_name + '/releases', {
              tag_name: '${{ steps.bumper.outputs.new_version }}',
              generate_release_notes: true
            })
            core.setOutput('html_url', response.data.html_url)

      - name: Update documentation with new version
        run: |
          sed -i 's/  version: .*/  version: "${{ steps.bumper.outputs.new_version }}"/g' mkdocs.yml

      - name: Tweet new release
        if: ${{ github.event.inputs.tweet == 'yes' }}
        uses: lazy-actions/tweet-action@1.0.1
        with:
          oauth_consumer_key: ${{ secrets[needs.secrets_keys.outputs.twitter_api_key] }}
          oauth_consumer_secret: ${{ secrets[needs.secrets_keys.outputs.twitter_api_secret_key] }}
          oauth_token: ${{ secrets[needs.secrets_keys.outputs.twitter_access_token] }}
          oauth_token_secret: ${{ secrets[needs.secrets_keys.outputs.twitter_access_token_secret] }}
          message: |
            ðŸš€ðŸŽ‰ Aioswitcher ${{ steps.bumper.outputs.new_version }} has been released! ðŸŽ‰ðŸš€
            ${{ steps.gh_release.outputs.html_url }}

            #aioswitcher #smarthome #python
